#!/usr/bin/env python2
import gtk
import logging
import argparse
from IndicatorIp.settings import Settings
from IndicatorIp.version import VERSION
from IndicatorIp.indicator import IPIndicator
import IndicatorIp.autostart

def parse_commandline(into_settings):
    parser = argparse.ArgumentParser(
            description='Display network IP on indicator bar')
    parser.add_argument('-i', '--interface',
            dest='interface',
            help='Show IP of INTERFACE (use "public" to show public IP)')
    parser.add_argument('--autostart',
            action='store_true',
            dest='autostart',
            help='Automatically start the indicator after logging into Unity.')
    parser.add_argument('--no-autostart',
            action='store_true',
            dest='no_autostart',
            help='Display instructions to disable autostart.')
    parser.add_argument('-u', '--fetch-ip-url',
            dest='url',
            help='URL of a service that returns the IP as plain text')
    parser.add_argument('-v', '--verbose',
            action='count',
            dest='verbosity',
            help='Be verbose on standard out (can be specified multiple times)')
    parser.add_argument('-V', '--version',
            action='version',
            version=VERSION,
            help='Print version and exit')
    parser.parse_args(namespace=settings)

if __name__ == "__main__":
    log = logging.getLogger(__name__)
    log.info('Starting %s', __file__)
    settings = Settings()
    parse_commandline(settings)

    # Translate the number of 'v's to a logging level
    log_level = 50
    if settings.verbosity:
        settings.verbosity += 1
        log_level = (5 - min(5, settings.verbosity)) * 10
    logging.basicConfig(level=log_level)

    if settings.autostart:
        IndicatorIp.autostart.enable()
    elif settings.no_autostart:
        IndicatorIp.autostart.disable()
    else:
        indicator = IPIndicator(settings)
        try:
            gtk.main()
        except KeyboardInterrupt:
            log.info('=== Caught keyboard interrupt ===')
        settings.interface = indicator.selected_interface.name
        settings.save()

    log.info('Exiting %s', __file__)
